// The purpose of the Bingo.java program is to stimulate a Bingo game. The fillUp method fills a 2D array that represents the bingo card by using a scanner to read from the “bingo.in” file. The program prints the bingo card before and after the game, as well as the numbers picked and the type of win.
Understanding the Algorithm: 
Marking a Card: In the markNumber method, a nested for loop goes through the card to check if the picked number matches any number already on the bingo card. If the numbers match, the corresponding element is set to true, indicating that the number has been marked.
Checking for a Duplicate Pick: In the playGame method, the boolean array pickedNumbers is created with a size of 76 to track the numbers that have been picked. In the game loop, the program generates a random number from 1 to 75 (inclusive) using the Math.random method. Next, the program checks if the pickedNumbers array at the index matches the randomNumber. When this value is true, it means the number has already been picked (a duplicate), and the program generates a new random number to find one that has not been picked yet. Upon finding a unique number, the array's pickedNumbers element is set to true, marking it as picked. The same number can never be picked twice, ensuring that there are no duplicate picks. 
Determining if a Card is a Win: The checkForWin method checks for three win conditions: horizontal, vertical, and diagonal. To check for horizontal wins, a nested for loop checks if all the numbers in a row have been marked. If all the numbers in a row are marked (row sum = 5), the program returns a horizontal win type. Likewise, to check for vertical wins, a nested for loop checks if all the numbers in a column have been marked. The program returns a vertical win type if all the numbers in a column are marked (column sum = 5). The checkForWin method also checks in two diagonal directions: top left to bottom right and top right to bottom left. In both cases, a for loop checks if all the numbers in the diagonal have been marked, which returns a diagonal win if the diagonal sum = 5. In the event that no win condition is met after checking all rows, columns, and diagonals, the program returns 0.

